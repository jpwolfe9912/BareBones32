ARM GAS  /var/folders/9y/n02fl3g16gnf7ppy14xghdy80000gn/T//ccuduIDf.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"sysmem.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text._sbrk,"ax",%progbits
  18              		.align	1
  19              		.global	_sbrk
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv5-sp-d16
  26              	_sbrk:
  27              	.LVL0:
  28              	.LFB0:
  29              		.file 1 "Src/sysmem.c"
   1:Src/sysmem.c  **** /**
   2:Src/sysmem.c  ****  ******************************************************************************
   3:Src/sysmem.c  ****  * @file      sysmem.c
   4:Src/sysmem.c  ****  * @author    Generated by STM32CubeIDE
   5:Src/sysmem.c  ****  * @brief     STM32CubeIDE System Memory calls file
   6:Src/sysmem.c  ****  *
   7:Src/sysmem.c  ****  *            For more information about which C functions
   8:Src/sysmem.c  ****  *            need which of these lowlevel functions
   9:Src/sysmem.c  ****  *            please consult the newlib libc manual
  10:Src/sysmem.c  ****  ******************************************************************************
  11:Src/sysmem.c  ****  * @attention
  12:Src/sysmem.c  ****  *
  13:Src/sysmem.c  ****  * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
  14:Src/sysmem.c  ****  * All rights reserved.</center></h2>
  15:Src/sysmem.c  ****  *
  16:Src/sysmem.c  ****  * This software component is licensed by ST under BSD 3-Clause license,
  17:Src/sysmem.c  ****  * the "License"; You may not use this file except in compliance with the
  18:Src/sysmem.c  ****  * License. You may obtain a copy of the License at:
  19:Src/sysmem.c  ****  *                        opensource.org/licenses/BSD-3-Clause
  20:Src/sysmem.c  ****  *
  21:Src/sysmem.c  ****  ******************************************************************************
  22:Src/sysmem.c  ****  */
  23:Src/sysmem.c  **** 
  24:Src/sysmem.c  **** /* Includes */
  25:Src/sysmem.c  **** #include <errno.h>
  26:Src/sysmem.c  **** #include <stdint.h>
  27:Src/sysmem.c  **** 
  28:Src/sysmem.c  **** /**
  29:Src/sysmem.c  ****  * Pointer to the current high watermark of the heap usage
ARM GAS  /var/folders/9y/n02fl3g16gnf7ppy14xghdy80000gn/T//ccuduIDf.s 			page 2


  30:Src/sysmem.c  ****  */
  31:Src/sysmem.c  **** static uint8_t *__sbrk_heap_end = NULL;
  32:Src/sysmem.c  **** 
  33:Src/sysmem.c  **** /**
  34:Src/sysmem.c  ****  * @brief _sbrk() allocates memory to the newlib heap and is used by malloc
  35:Src/sysmem.c  ****  *        and others from the C library
  36:Src/sysmem.c  ****  *
  37:Src/sysmem.c  ****  * @verbatim
  38:Src/sysmem.c  ****  * ############################################################################
  39:Src/sysmem.c  ****  * #  .data  #  .bss  #       newlib heap       #          MSP stack          #
  40:Src/sysmem.c  ****  * #         #        #                         # Reserved by _Min_Stack_Size #
  41:Src/sysmem.c  ****  * ############################################################################
  42:Src/sysmem.c  ****  * ^-- RAM start      ^-- _end                             _estack, RAM end --^
  43:Src/sysmem.c  ****  * @endverbatim
  44:Src/sysmem.c  ****  *
  45:Src/sysmem.c  ****  * This implementation starts allocating at the '_end' linker symbol
  46:Src/sysmem.c  ****  * The '_Min_Stack_Size' linker symbol reserves a memory for the MSP stack
  47:Src/sysmem.c  ****  * The implementation considers '_estack' linker symbol to be RAM end
  48:Src/sysmem.c  ****  * NOTE: If the MSP stack, at any point during execution, grows larger than the
  49:Src/sysmem.c  ****  * reserved size, please increase the '_Min_Stack_Size'.
  50:Src/sysmem.c  ****  *
  51:Src/sysmem.c  ****  * @param incr Memory size
  52:Src/sysmem.c  ****  * @return Pointer to allocated memory
  53:Src/sysmem.c  ****  */
  54:Src/sysmem.c  **** void *_sbrk(ptrdiff_t incr)
  55:Src/sysmem.c  **** {
  30              		.loc 1 55 1 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		.loc 1 55 1 is_stmt 0 view .LVU1
  35 0000 10B5     		push	{r4, lr}
  36              		.cfi_def_cfa_offset 8
  37              		.cfi_offset 4, -8
  38              		.cfi_offset 14, -4
  39 0002 0346     		mov	r3, r0
  56:Src/sysmem.c  ****   extern uint8_t _end; /* Symbol defined in the linker script */
  40              		.loc 1 56 3 is_stmt 1 view .LVU2
  57:Src/sysmem.c  ****   extern uint8_t _estack; /* Symbol defined in the linker script */
  41              		.loc 1 57 3 view .LVU3
  58:Src/sysmem.c  ****   extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  42              		.loc 1 58 3 view .LVU4
  59:Src/sysmem.c  ****   const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  43              		.loc 1 59 3 view .LVU5
  44              		.loc 1 59 18 is_stmt 0 view .LVU6
  45 0004 0C4A     		ldr	r2, .L8
  46 0006 0D49     		ldr	r1, .L8+4
  60:Src/sysmem.c  ****   const uint8_t *max_heap = (uint8_t *)stack_limit;
  47              		.loc 1 60 3 is_stmt 1 view .LVU7
  48              	.LVL1:
  61:Src/sysmem.c  ****   uint8_t *prev_heap_end;
  49              		.loc 1 61 3 view .LVU8
  62:Src/sysmem.c  **** 
  63:Src/sysmem.c  ****   /* Initialize heap end at first call */
  64:Src/sysmem.c  ****   if (NULL == __sbrk_heap_end)
  50              		.loc 1 64 3 view .LVU9
  51              		.loc 1 64 12 is_stmt 0 view .LVU10
ARM GAS  /var/folders/9y/n02fl3g16gnf7ppy14xghdy80000gn/T//ccuduIDf.s 			page 3


  52 0008 0D48     		ldr	r0, .L8+8
  53              	.LVL2:
  54              		.loc 1 64 12 view .LVU11
  55 000a 0068     		ldr	r0, [r0]
  56              		.loc 1 64 6 view .LVU12
  57 000c 40B1     		cbz	r0, .L6
  58              	.L2:
  65:Src/sysmem.c  ****   {
  66:Src/sysmem.c  ****     __sbrk_heap_end = &_end;
  67:Src/sysmem.c  ****   }
  68:Src/sysmem.c  **** 
  69:Src/sysmem.c  ****   /* Protect heap from growing into the reserved MSP stack */
  70:Src/sysmem.c  ****   if (__sbrk_heap_end + incr > max_heap)
  59              		.loc 1 70 3 is_stmt 1 view .LVU13
  60              		.loc 1 70 23 is_stmt 0 view .LVU14
  61 000e 0C48     		ldr	r0, .L8+8
  62 0010 0068     		ldr	r0, [r0]
  63 0012 0344     		add	r3, r3, r0
  64              	.LVL3:
  65              		.loc 1 70 6 view .LVU15
  66 0014 521A     		subs	r2, r2, r1
  67 0016 9342     		cmp	r3, r2
  68 0018 06D8     		bhi	.L7
  71:Src/sysmem.c  ****   {
  72:Src/sysmem.c  ****     errno = ENOMEM;
  73:Src/sysmem.c  ****     return (void *)-1;
  74:Src/sysmem.c  ****   }
  75:Src/sysmem.c  **** 
  76:Src/sysmem.c  ****   prev_heap_end = __sbrk_heap_end;
  69              		.loc 1 76 3 is_stmt 1 view .LVU16
  70              	.LVL4:
  77:Src/sysmem.c  ****   __sbrk_heap_end += incr;
  71              		.loc 1 77 3 view .LVU17
  72              		.loc 1 77 19 is_stmt 0 view .LVU18
  73 001a 094A     		ldr	r2, .L8+8
  74 001c 1360     		str	r3, [r2]
  78:Src/sysmem.c  **** 
  79:Src/sysmem.c  ****   return (void *)prev_heap_end;
  75              		.loc 1 79 3 is_stmt 1 view .LVU19
  76              	.LVL5:
  77              	.L1:
  80:Src/sysmem.c  **** }
  78              		.loc 1 80 1 is_stmt 0 view .LVU20
  79 001e 10BD     		pop	{r4, pc}
  80              	.LVL6:
  81              	.L6:
  66:Src/sysmem.c  ****   }
  82              		.loc 1 66 5 is_stmt 1 view .LVU21
  66:Src/sysmem.c  ****   }
  83              		.loc 1 66 21 is_stmt 0 view .LVU22
  84 0020 0748     		ldr	r0, .L8+8
  85 0022 084C     		ldr	r4, .L8+12
  86 0024 0460     		str	r4, [r0]
  87 0026 F2E7     		b	.L2
  88              	.LVL7:
  89              	.L7:
  72:Src/sysmem.c  ****     return (void *)-1;
ARM GAS  /var/folders/9y/n02fl3g16gnf7ppy14xghdy80000gn/T//ccuduIDf.s 			page 4


  90              		.loc 1 72 5 is_stmt 1 view .LVU23
  91 0028 FFF7FEFF 		bl	__errno
  92              	.LVL8:
  72:Src/sysmem.c  ****     return (void *)-1;
  93              		.loc 1 72 11 is_stmt 0 view .LVU24
  94 002c 0C23     		movs	r3, #12
  95 002e 0360     		str	r3, [r0]
  73:Src/sysmem.c  ****   }
  96              		.loc 1 73 5 is_stmt 1 view .LVU25
  73:Src/sysmem.c  ****   }
  97              		.loc 1 73 12 is_stmt 0 view .LVU26
  98 0030 4FF0FF30 		mov	r0, #-1
  99 0034 F3E7     		b	.L1
 100              	.L9:
 101 0036 00BF     		.align	2
 102              	.L8:
 103 0038 00000000 		.word	_estack
 104 003c 00000000 		.word	_Min_Stack_Size
 105 0040 00000000 		.word	.LANCHOR0
 106 0044 00000000 		.word	_end
 107              		.cfi_endproc
 108              	.LFE0:
 110              		.section	.bss.__sbrk_heap_end,"aw",%nobits
 111              		.align	2
 112              		.set	.LANCHOR0,. + 0
 115              	__sbrk_heap_end:
 116 0000 00000000 		.space	4
 117              		.text
 118              	.Letext0:
 119              		.file 2 "/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/lib/gcc/arm-none-eabi/10.3.1/incl
 120              		.file 3 "/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/machine/_de
 121              		.file 4 "/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/sys/_stdint
 122              		.file 5 "/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/sys/errno.h
ARM GAS  /var/folders/9y/n02fl3g16gnf7ppy14xghdy80000gn/T//ccuduIDf.s 			page 5


DEFINED SYMBOLS
                            *ABS*:0000000000000000 sysmem.c
/var/folders/9y/n02fl3g16gnf7ppy14xghdy80000gn/T//ccuduIDf.s:18     .text._sbrk:0000000000000000 $t
/var/folders/9y/n02fl3g16gnf7ppy14xghdy80000gn/T//ccuduIDf.s:26     .text._sbrk:0000000000000000 _sbrk
/var/folders/9y/n02fl3g16gnf7ppy14xghdy80000gn/T//ccuduIDf.s:103    .text._sbrk:0000000000000038 $d
/var/folders/9y/n02fl3g16gnf7ppy14xghdy80000gn/T//ccuduIDf.s:111    .bss.__sbrk_heap_end:0000000000000000 $d
/var/folders/9y/n02fl3g16gnf7ppy14xghdy80000gn/T//ccuduIDf.s:115    .bss.__sbrk_heap_end:0000000000000000 __sbrk_heap_end

UNDEFINED SYMBOLS
__errno
_estack
_Min_Stack_Size
_end
